---
title: "Paket_erstellen"
author: "Vivian Stehmans"
format: html
editor: visual
---

```{r}

# Input: Datensatz
# - Y
# - Kovariablen (Integer) (mehr als Y und id)
# - id Variable

algorithmus <- function(datensatz){
  
  checking_inputs(datensatz)
  # unabhängige Variable Y im Datensatz
  # eine id Variable
  # integer Kovariate mit p>0
  
  cv_datensatz <- aufteilen_daten
  
  
  final_parameter <- trainings_algorithmus(cv_datensatz, tuning_parameter_grid)
  # tuning_parameter_grid
  # final parameter = iter_final, final_tuning_parameter, modelle
  
  final_model <- finales_model(datensatz, )
  
  
  
  
}

checking_inputs <- function(datensatz){
  
}


  


```

# Pakete laden

```{r}
pacman::p_load("tidyverse","caret")

pacman::p_load(
  SAEforest, emdi, saeSim, ggplot2, tidyr, saeTrafo,
  dplyr, sae, furrr, rbenchmark, doParallel,
  foreach, randomForest, future.apply, lme4
)
```

# Daten generieren

```{r}

set.seed(100)

# Parameter
Domains <- 50
pop_size <- rep(100, Domains)

# Hilfsfunktionen: Integer-Kovariablen und Fehlerterm
gen_X1Int <- function(dat, m = dat$muD, s = 4) {
  dat[["X1"]] <- as.integer(round(rnorm(nrow(dat), mean = m, sd = s)))
  return(dat)
}

gen_X2Int <- function(dat, m = dat$muD, s = 2) {
  dat[["X2"]] <- as.integer(round(rnorm(nrow(dat), mean = m, sd = s)))
  return(dat)
}

gen_myE <- function(dat, m = 0, s = 1000) {
  dat[["e"]] <- rnorm(nrow(dat), mean = m, sd = s)
  return(dat)
}

# Aufbau der Population
setup <- sim_base(data = base_id(nDomains = Domains, nUnits = pop_size)) %>%
  sim_gen(gen_generic(runif, min = -1, max = 1, groupVars = "idD", name = "muD")) %>%
  sim_gen(gen_X1Int) %>%
  sim_gen(gen_X2Int) %>%
  sim_gen(generator = gen_myE) %>%
  sim_gen_v(mean = 0, sd = 500) %>%
  sim_resp_eq(Y = 15000 - 500 * X1 - 500 * X2 + v + e)

# Eine Population erzeugen
Pop <- sim(setup, R = 1)[[1]]

# Spalte 'idD' in 'id' umbenennen
names(Pop)[names(Pop) == "idD"] <- "id"

# Negative Einkommen auf 0 setzen
Pop$Y[Pop$Y < 0] <- 0

# Nur relevante Spalten
Pop <- Pop[, c("id", "X1", "X2", "Y")]


```


```{r}
set.seed(123)

# Parameter
n_groups <- 40       # Anzahl Gruppen
n_per_group <- 100    # Beobachtungen pro Gruppe
n_total <- n_groups * n_per_group
p <- 10              # Anzahl integer-Kovariaten

# ID-Variable
id <- rep(1:n_groups, each = n_per_group)

# Integer-Kovariaten (X1 bis X10), alle zufällig aus diskreten Verteilungen
X1 <- sample(1:10, n_total, replace = TRUE)
X2 <- sample(0:20, n_total, replace = TRUE)
X3 <- sample(1:5, n_total, replace = TRUE)
X4 <- rpois(n_total, lambda = 4)
X5 <- rbinom(n_total, size = 1, prob = 0.5)
X6 <- sample(10:30, n_total, replace = TRUE)
X7 <- sample(-10:10, n_total, replace = TRUE)
X8 <- sample(0:3, n_total, replace = TRUE)
X9 <- rpois(n_total, lambda = 2)
X10 <- sample(1:100, n_total, replace = TRUE)

# Gruppenspezifischer zufälliger Intercept
group_effect <- rnorm(n_groups, mean = 6, sd = 3)
random_intercepts <- group_effect[id]

# Zielvariable Y mit linearer + nichtlinearer + Interaktion + Random Intercept + Fehler
Y <- 5 +
  2*X1 -
  1*X2 +
  0.5*X3^2 -
  0.8*X4 +
  3*X5 +
  0.2*X6 +
  1.5*X7 +
  2*X8 +
  0.5*X9 +
  0.01*X10 +
  random_intercepts +
  rnorm(n_total, sd = 5)

# Alles in Data Frame
sim_data <- data.frame(
  id = as.factor(id),
  X1 = as.integer(X1),
  X2 = as.integer(X2),
  X3 = as.integer(X3),
  X4 = as.integer(X4),
  X5 = as.integer(X5),
  X6 = as.integer(X6),
  X7 = as.integer(X7),
  X8 = as.integer(X8),
  X9 = as.integer(X9),
  X10 = as.integer(X10),
  Y = Y
)

# Vorschau
head(sim_data)

```

```{r}

boostedrirt <- function(data){
  
  #checking_inputs()
  
  # Erzeuge 5 - CV Daten
  cv_data <- caret::createFolds(data$Y, k = 5)
  # Ziehe für alle CV Folds Stichproben
  train_data <- NULL
  test_data <- NULL
  cv_stichprobe <- NULL
  for(i in 1:5){
    train_data[[i]] <- data[-cv_data[[i]], ]
    test_data[[i]] <- data[cv_data[[i]],]
    cv_stichprobe[[i]] <- ziehen_stichprobe(train_data[[i]])
    for(para_option in 1:4){
    para_data<- cv_stichprobe[[i]][[1]]$data
    # para_data sind die Daten die unseren colsample und subsample entsprechen
    f_iter <- mean(para_data$Y) # Startwert
    itermax <- 100
    improv_count <- 0
    while(iter <= itermax && improv_count < 5){
    para_data$neg_grad <- berechne_neg_grad(para_data,f_iter)
    cart_modell <- schaetze_cart(para_data)
    para_data$temp_res<- berechne_temp_residuen(para_data,cart_modell)
    lmm_modell<- schaetze_lmm(para_data)
    para_data$f_iter_act <- berechne_aktuelle_vorhersage(para_data,lmm_modell,f_iter)
    rmse <- berechne_rmse(para_data)
    iter <- iter+1
    }
    
    }
    
  }
  cv_stichprobe
  
  
  
  
}

cv_stichprobe[[1]][1]

#-------------

boostedrirt(sim_data)


cv_Pop <- caret::createFolds(sim_data$Y, k = 5)

parameter_grid <- data.frame("colsample"= c(0.6,1),
                             "subsample"= c(0.7,1))


cv_stichprobe <- NULL
for(i in 1:5){
  cv_stichprobe[[i]] <- ziehen_stichprobe(sim_data[cv_Pop[[i]],])
}

ziehen_stichprobe <- function(data){
  size_row <- nrow(data)*0.7
  size_col <- ncol(data)*0.6
  sample_row <- sample(nrow(data), size = size_row, replace = FALSE)
  sample_col <- sample(ncol(data), size = size_col, replace = FALSE)
  
  stichprobe <- list()
  stichprobe$data_7_1 <- list(
    data = data[sample_row, ],
    subsample = 0.7,
    colsample = 1.0
  )

  stichprobe$data_1_1 <- list(
    data = data,
    subsample = 1.0,
    colsample = 1.0
  )

  stichprobe$data_1_6 <- list(
    data = data[, sample_col],
    subsample = 1.0,
    colsample = 0.6
  )

  stichprobe$data_7_6 <- list(
    data = data[sample_row, sample_col],
    subsample = 0.7,
    colsample = 0.6
  )

  stichprobe
}
  



#Berechne den negativen Gradienten der quadratischen Verlust-
#funktion gegeben durch: giter = Y − ˆfiter−

f_iter <- mean(cv_stichprobe[[1]]$data_1_1$data$Y)

berechne_neg_grad <- function(data, f_iter){
  neg_grad <- data$Y-f_iter
  neg_grad
  }



cv_stichprobe[[1]]$data_1_1$data$neg_grad <- berechne_neg_grad(cv_stichprobe[[1]]$data_1_1$data, f_iter)

schaetze_cart <- function(data){
  rpart::rpart(neg_grad~.,data %>%
  dplyr::select(-Y,-id))}

cart_1 <- schaetze_cart(cv_stichprobe[[1]]$data_1_1$data)

berechne_temp_residuen <- function(data, cart){
  data$pred <- predict(cart)
  temp_res <- data$Y - data$pred
  temp_res
}

cv_stichprobe[[1]]$data_1_1$data$pred <- predict(cart_1)


data_temp_res<- berechne_temp_residuen(cv_stichprobe[[1]]$data_1_1$data, cart_1)

lmer(formula = temp_res ~ 1 + (1|id), data = data_temp_res%>%
  dplyr::select(-Y, -neg_grad, -pred))

schaetze_lmm <- function(data){
  lmer(formula = temp_res ~ 1 + (1|id), data = data%>%
  dplyr::select(-Y, -neg_grad, -pred))
}

lmm_iter <- schaetze_lmm(data_temp_res)

berechne_aktuelle_vorhersage <- function(data,lmm_model, f_iter, alpha = 0.1){
  random_eff_id<- ranef(lmm_model)$id
  beta0<- fixef(lmm_model)[1]
  data$f_lmm_id<- random_eff_id[as.character(data$id),]
  f_iter_act <- f_iter+ alpha *(data$pred - beta0+ data$f_lmm_id)
}

data_f_iter <- berechne_aktuelle_vorhersage(data_temp_res,lmm_iter,f_iter)

berechne_rmse <- function(data){
  rmse <- sqrt(1/nrow(data)*sum((data$f_iter_act -data$Y)^2))
  rmse
}

rmse<- berechne_rmse(data_f_iter)




cv_stichprobe[[1]][[1]]$data

```
